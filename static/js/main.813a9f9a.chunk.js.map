{"version":3,"sources":["components/card-details/card-details.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardDetails","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","show","react_default","a","createElement","className","children","onClick","onClose","Component","Card","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","state","clickedMonster","monsterClicked","showMonster","toggleMonster","setState","handleClick","e","monster","JSON","parse","target","getAttribute","monsterData","alt","src","id","data-id","stringify","name","email","card_details_component_CardDetails","address","company","phone","website","CardList","monsters","map","card_component_Card","SearchBox","_ref","placeholder","handleChange","type","onChange","size","App","searchField","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","search_box_component_SearchBox","card_list_component_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.813a9f9a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./card-details.styles.css\";\r\n\r\nexport class CardDetails extends Component {\r\n  render() {\r\n    if (!this.props.show) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"backdrop\">\r\n        <div className=\"modal\">\r\n          {this.props.children}\r\n          <div className=\"footer\">\r\n            <button onClick={this.props.onClose}>Hide</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CardDetails } from \"../card-details/card-details.component\";\r\nimport \"./card.styles.css\";\r\nexport class Card extends Component {\r\n  state = {\r\n    clickedMonster: null,\r\n    monsterClicked: false,\r\n    showMonster: false\r\n  };\r\n\r\n  toggleMonster = () => {\r\n    this.setState({\r\n      monsterClicked: false,\r\n      showMonster: !this.state.showMonster\r\n    });\r\n  };\r\n\r\n  handleClick = e => {\r\n    const monster = JSON.parse(e.target.getAttribute(\"data-id\"));\r\n    this.setState({\r\n      monsterClicked: true,\r\n      clickedMonster: monster\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const monsterData = this.props.monster;\r\n    return (\r\n      <div className=\"card-container\">\r\n        <img\r\n          alt=\"monster\"\r\n          src={`https://robohash.org/${monsterData.id}?set=set2&size=180x180`}\r\n          data-id={JSON.stringify(monsterData)}\r\n          onClick={this.handleClick}\r\n        />\r\n        <h2 key={monsterData.id}>{monsterData.name}</h2>\r\n        <p>{monsterData.email}</p>\r\n        <CardDetails\r\n          show={this.state.monsterClicked}\r\n          onClose={this.toggleMonster}\r\n        >\r\n          <p>\r\n            Address:\r\n            {this.state.clickedMonster\r\n              ? \" \" + JSON.stringify(this.state.clickedMonster.address)\r\n              : null}\r\n          </p>\r\n          <p>\r\n            Company:\r\n            {this.state.clickedMonster\r\n              ? \" \" + JSON.stringify(this.state.clickedMonster.company)\r\n              : null}\r\n          </p>\r\n          <p>\r\n            Phone:\r\n            {this.state.clickedMonster\r\n              ? \" \" + this.state.clickedMonster.phone\r\n              : null}\r\n          </p>\r\n          <p>\r\n            Website:\r\n            {this.state.clickedMonster\r\n              ? \" \" + this.state.clickedMonster.website\r\n              : null}\r\n          </p>\r\n        </CardDetails>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(monster => {\r\n        return <Card monster={monster} key={monster.id} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n      size=\"50\"\r\n    />\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}